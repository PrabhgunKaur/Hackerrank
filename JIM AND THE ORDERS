typedef struct {
    int id;
    int completion;
} Order;

// Comparator function for qsort
int cmp(const void *a, const void *b) {
    Order *o1 = (Order *)a;
    Order *o2 = (Order *)b;

    if (o1->completion == o2->completion) {
        return o1->id - o2->id;  // smaller ID first if same completion time
    }
    return o1->completion - o2->completion; // otherwise sort by completion time
}

// Main function to solve problem
int* jimOrders(int orders_rows, int orders_columns, int** orders, int* result_count) {
    // allocate array of Order structs
    Order* arr = malloc(orders_rows * sizeof(Order));
    if (!arr) return NULL;  // safety check

    // fill struct array
    for (int i = 0; i < orders_rows; i++) {
        arr[i].id = i + 1;  // order ID starts from 1
        arr[i].completion = orders[i][0] + orders[i][1]; // arrival + prep time
    }

    // sort using comparator
    qsort(arr, orders_rows, sizeof(Order), cmp);

    // allocate result array
    int* result = malloc(orders_rows * sizeof(int));
    if (!result) {
        free(arr);
        return NULL;
    }

    // store sorted IDs
    for (int i = 0; i < orders_rows; i++) {
        result[i] = arr[i].id;
    }

    free(arr);
    *result_count = orders_rows;
    return result;
}
